---
title: QuotaGuard
owner: Partners
---

<strong><%= modified_date %></strong>

QuotaGuard Static allows a PWS application to route outbound traffic through a static IP. You can provide this IP address to an API partner for IP based whitelisting and open your own firewall to access internal resources. 

QuotaGuard Static is language and platform agnostic. There is native support for Ruby, Python, Node.js, Scala, Java and every other mainstream language.

QuotaGuard Static comes in three flavours:

**Outbound - Included in all plans**

1. An HTTP proxy for accessing HTTP & HTTPS web services 
2. A SOCKS5 proxy for TCP level routing such as accessing a database or LDAP server

**Inbound - Included in Micro plan & above**

3. HTTP/HTTPS reverse proxy for accessing your PWS app on a Static IP 

There is native support across Ruby, Python, Node.js, PHP, Scala, Java and every other language.

## Managing Services

To create and bind a service instance, see [Managing services from the command line](http://docs.run.pivotal.io/devguide/services/managing-services.html).

## What are my IPs?
You are provided with two static IP addresses as part of our fault tolerant, load balanced service. Traffic may route through either one at any time.

Once QuotaGuard Static is bound, it updates the `VCAP_SERVICES` environment variable with an entry that contains the credentials as well as other information needed to access your proxy. See [Delivering Service Credentials to an Application](http://docs.run.pivotal.io/devguide/services/application-binding.html#use) and [VCAP_SERVICES Environment Variable](http://docs.run.pivotal.io/devguide/deploy-apps/environment-variable.html).

The `VCAP_SERVICES` entry looks like the following:

```js
{
  "quotaguard": [
    {
      "name": "QuotaGuardInstance",
      "label": "quotaguard",
      "tags": [],
      "plan": "starter",
      "credentials": {
        "QUOTAGUARDSTATIC_URL": "http://username:password@proxy.quotaguard.com:9293"
      }
    }
  ]
}
```

To start using QuotaGuard Static in your application, set up your application to use the proxy URL available in the `QUOTAGUARDSTATIC_URL` parameter.

## HTTP vs. SOCKS5 proxy
The first decision you must make as a developer is whether to target our HTTP or SOCKS proxy. SOCKS is more versatile as it handles TCP level traffic but the setup steps are more involved than the HTTP proxy. Our general rule of thumb is use HTTP if accessing a web service otherwise use SOCKS.

>note
>Please note the SOCKS server is accessible on port 1080, not the port specified in your QUOTAGUARDSTATIC_URL variable (port 9293).

### Example use cases
1. Accessing an HTTP or HTTPS API (e.g. https://api.github.com/users/octocat/orgs) ==> **HTTP Proxy**
1. Accessing a MySQL database ==> **SOCKS**

## Using with Ruby/Rails
Ruby has an excellent REST client that easily allows you to specify an HTTP proxy. You can run the below example in an irb session and verify that the final IP returned is one of your two static IPs.

```ruby
require "rest-client"

RestClient.proxy = ENV["QUOTAGUARDSTATIC_URL"]

res = RestClient.get("http://ip.quotaguard.com")

puts "Your Static IP is: #{res.body}"
```

## Using with Python/Django
### Using with the Requests library
[Requests](http://docs.python-requests.org/en/latest/) is a great HTTP library for Python. It allows you to specify an authenticated proxy on a per request basis so you can pick and choose when to route through your static IP.

```python
import requests
import os

proxies = {
"http": os.environ['QUOTAGUARDSTATIC_URL'],
"https": os.environ['QUOTAGUARDSTATIC_URL']
}

res = requests.get("http://ip.quotaguard.com/", proxies=proxies)
print res.text
```

### Using with urllib2
urllib2 is a more basic library used for HTTP communication in Python and uses environment variables to set a proxy service.

In your application initialization you should set the `http_proxy` variable to match the `QUOTAGUARDSTATIC_URL`.

```python
# Assign QuotaGuard to your environment's http_proxy variable
os.environ['http_proxy'] = os.environ['QUOTAGUARDSTATIC_URL']
```

To test in the Python interpreter

```python
import urllib2, os
os.environ['http_proxy'] = os.environ['QUOTAGUARDSTATIC_URL']
url = 'http://ip.quotaguard.com/'
proxy = urllib2.ProxyHandler()
opener = urllib2.build_opener(proxy)
in_ = opener.open(url)
res = in_.read()
print res
```

## Using with Node.js
### Accessing an HTTP API with Node.js
To access an HTTP API you can use the standard HTTP library in Node.js but must ensure you correctly set the "Host" header to your target hostname, not the proxy hostname.

```javascript
var http, options, proxy, url;

http = require("http");

url = require("url");

proxy = url.parse(process.env.QUOTAGUARDSTATIC_URL);
target  = url.parse("http://ip.quotaguard.com/");

options = {
  hostname: proxy.hostname,
  port: proxy.port || 80,
  path: target.href,
  headers: {
    "Proxy-Authorization": "Basic " + (new Buffer(proxy.auth).toString("base64")),
    "Host" : target.hostname
  }
};

http.get(options, function(res) { 
  res.pipe(process.stdout);
  return console.log("status code", res.statusCode);  
});
```

### Accessing an HTTPS API with Node.js
The standard Node.js HTTPS module does not handle making requests through a proxy very well. If you need to access an HTTPS API we recommend using the Request module (npm install request).

```javascript
var request = require('request');

var options = {
    proxy: process.env.QUOTAGUARDSTATIC_URL,
    url: 'https://api.github.com/repos/joyent/node',
    headers: {
        'User-Agent': 'node.js'
    }
};

function callback(error, response, body) {   
    if (!error && response.statusCode == 200) {
        console.log(body);     
    }
}

request(options, callback);
```

### Accessing a MySQL Database using SOCKS Proxy in Node.js
To use a SOCKS proxy for any reason in Node.js we recommend [socksjs](https://github.com/M2Ys4U/socksjs) as this is one of the only Node.js SOCKS modules to support authentication.

```term
npm install socksjs
```

This sample creates a connection to a SOCKS connection to our proxy and uses that for all MySQL requests.

```javascript
var mysql = require('mysql2'),
    url = require('url'),
    SocksConnection = require('socksjs');

var remote_options = {
    host:'your-database.eu-west-1.rds.amazonaws.com',
    port: 3306
};

var proxy = url.parse(process.env.QUOTAGUARDSTATIC_URL),
    auth = proxy.auth,
    username = auth.split(':')[0],
    pass = auth.split(':')[1];

var sock_options = {
    host: proxy.hostname,
    port: 1080,
    user: username,
    pass: pass
};

var sockConn = new SocksConnection(remote_options, sock_options);
var dbConnection = mysql.createConnection({
    user: 'dbuser',
    database: 'dbname',
    password: 'dbpassword',
    stream: sockConn
});
dbConnection.query('SELECT 1+1 as test1;', function(err, rows, fields) {
    if (err) throw err;

    console.log('Result: ', rows);
    sockConn.dispose();
});
dbConnection.end();
```
## Using with PHP
PHP cURL is the easiest way to make HTTP requests via QuotaGuard Static. This example assumes that you have set the QUOTAGUARDSTATIC_URL environment variable which is automatically set for you when you provision the add-on.

The IP address printed on screen will be one of your two static IP addresses, run it a couple of times and you'll probably see the other one too.

```php
<?php

function lookup(){
  $quotaguard_env = getenv("QUOTAGUARDSTATIC_URL");
  $quotaguard = parse_url($quotaguard_env);

  $proxyUrl       = $quotaguard['host'].":".$quotaguard['port'];
  $proxyAuth       = $quotaguard['user'].":".$quotaguard['pass'];

  $url = "http://ip.quotaguard.com/";

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_PROXY, $proxyUrl);
  curl_setopt($ch, CURLOPT_PROXYAUTH, CURLAUTH_BASIC);
  curl_setopt($ch, CURLOPT_PROXYUSERPWD, $proxyAuth);
  $response = curl_exec($ch);
  return $response;
}

$res = lookup();
print_r($res);

?>

```

## Using with Java
The JVM  allows you to configure a `socksProxyHost`. The example below uses Apache HttpClient, but the same configuration applies to other JVM-based clients.

```java
import java.net.*;
import java.io.*;

public class HelloWorld {
    public static void main(String []args) throws IOException {
        URL proxyUrl = new URL(System.getenv("QUOTAGUARDSTATIC_URL"));
        String userInfo = proxyUrl.getUserInfo();
        String user = userInfo.substring(0, userInfo.indexOf(':'));
        String password = userInfo.substring(userInfo.indexOf(':') + 1);

        URLConnection conn = null;
        System.setProperty("http.proxyHost", proxyUrl.getHost());
        System.setProperty("http.proxyPort", Integer.toString(proxyUrl.getPort()));

        Authenticator.setDefault(new Authenticator() {
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication(user, password.toCharArray());
                }
            });

        URL url = new URL("http://ip.quotaguard.com");
        conn = url.openConnection();
        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));

        String inputLine;
        while ((inputLine = in.readLine()) != null)
            System.out.println(inputLine);

        in.close();
    }
}
```

You can check available proxy related JVM settings [here](https://docs.oracle.com/javase/8/docs/technotes/guides/net/proxies.html).

## Using with Clojure

The Clojure [clj-http](https://github.com/dakrone/clj-http) library allows you to configure a [proxy for an HTTP request](https://github.com/dakrone/clj-http#proxies). 
The example below shows you how to use this with the add-on:

```clojure
(defn get-quota-guard []
  (let [proxy-uri (java.net.URI. (env :quotaguardstatic-url))]
    (client/get "http://httpbin.org/ip"
      {:proxy-host (.getHost proxy-uri)
       :proxy-port (.getPort proxy-uri)
       :headers {
         "Proxy-Authorization"
         (str "Basic " (.encode (sun.misc.BASE64Encoder.)
           (.getBytes (.getUserInfo proxy-uri))))}})))
```

## Is the HTTP proxy secure when accessing HTTPS services?
Yes. You can access HTTPS services via the HTTP proxy whilst still getting full SSL/TLS security. When you make a request via the proxy to an HTTPS endpoint your client should transparently issue a CONNECT request rather than a basic GET request.

On receipt of this CONNECT request the proxy will open a tunnel between your client and the endpoint, allowing your client to negotiate a standard SSL session with the endpoint. Once negotiated all traffic sent between your client and the endpoint will be encrypted as if you had connected directly with them.  

We are also testing HTTPS proxy endpoints, please [contact us](mailto:support@quotaguard.com) if you want to trial it. With HTTPS endpoint your initial CONNECT request will be also encrypted, this protects proxy credentials and remote hostname but will require additional TLS handshake. Please note that HTTPS endpoints are only supported by libcurl based HTTP client libraries, we recommend to check if your language has bindings for it.

## SOCKS proxy setup

QuotaGuard Static provides two ways to setup SOCKS5 proxy integration within your app: SOCKS5 tunnels and a wrapper script.

SOCKS5 tunnels:

- Work on per host basis
- Compatible with all programming environments
- Support advanced configurations: transparent mode and encryption

Wrapper script:

- Proxies all connections, with optional constraints by IP
- Incompatible with some threaded environments and environments with event loops. Notably doesn't support Java and Node.js

We recommend using SOCKS5 tunnels unless you need to route all traffic within the app through the SOCKS5 proxy.

### Setting up SOCKS5 tunnel

SOCKS5 tunnel application allows you to create a local tunnels for your app, all traffic to the local port will be forwarded through the QuotaGuard proxies. You have to setup separate tunnel configuration for every host you want to proxy. To get started with the tunnel please follow these steps:

- Download and extract the `qgtunnel` in your app directory:

```term
$ curl https://s3.amazonaws.com/quotaguard/qgtunnel-latest.tar.gz | tar xz
```

- Add the tunnel application to your standard startup commands, for example:

Before:

```term
bundle exec unicorn -p $PORT -c ./config/unicorn.rb
```

After:

```term
bin/qgtunnel bundle exec unicorn -p $PORT -c ./config/unicorn.rb
```

- Create tunnel configuration via [DATABASE_URL](#tunnel-for-database_url) or [QuotaGuard dashboard](#custom-tunnel-configuration).

- Commit and deploy these changes.

#### Tunnel for DATABASE_URL

If your application relies on `DATABASE_URL` environment variable then you can use automatically generated configuration and don't have to perform additional configuration steps. For example if your `DATABASE_URL` is postgres://foo:bar@ec2-10-10-10-1.compute-1.amazonaws.com:5432/baz then tunnel will be listening on port 5432 of your dyno and all connections to this port will be forwarded to ec2-10-10-10-1.compute-1.amazonaws.com:5432 via SOCKS5 proxy. In this mode tunnel also enables [transparent DNS override](#transparent-mode) which will resolve DNS name ec2-10-10-10-1.compute-1.amazonaws.com to the localhost address so all connections to this hostname will transparently go to the tunnel.

#### Custom tunnel configuration

Open QuotaGuard Static dashboard and visit `Tunnels` section of the `Setup` page. You can open dashboard from your PWS services page.

On the `Setup` page create a new tunnel configuration for the remote server by clicking on `Create Tunnel`. For example, if you want to access IP whitelisted postgres database located on a host ec2-10-10-10-1.compute-1.amazonaws.com, put tcp://ec2-10-10-10-1.compute-1.amazonaws.com:5432 into the `Remote Destination` and press `Save`. With this configuration your tunnel will listen on dyno's port 5432 and will route all traffic to the ec2-10-10-10-1.compute-1.amazonaws.com via the SOCKS5 proxy. If you want to use a different local port, you can provide it explicitly in configuration interface.

Modify your app configuration to use localhost instead of remote server. For the same postgres example change connection string from: postgres://user:pass@ec2-10-10-10-1.compute-1.amazonaws.com:5432 to postgres://user:pass@127.0.0.1:5432. You can also export tunnel configuration to use it [locally](#local-tunnel-configuration) on your dyno without relying on QuotaGuard servers.

### Debugging tunnel configuration

By default all fatal errors encountered by the `qgtunnel` will be logged. If this information is not enough you can enable verbose output mode by setting `QGTUNNEL_DEBUG` environment variable to `true`.

### Local tunnel configuration

By default `qgtunnel` will try to fetch configuration from the QuotaGuard API, but it also supports local configuration. You can download configuration file from the tunnel setup interface by pressing "Download configuration". To enable local mode place downloaded file into root directory of your project under `.qgtunnel` filename, commit it and deploy.

### Transparent mode

If your application depends on DNS based discovery process or needs local tunnel to be resolvable via the DNS name regular tunneling mode will not be enough. For this situation you should enable transparent mode for the tunnel in your configuration. In transparent mode tunnel application will alter DNS queries from your app to the local tunnel address. 

Let's say you want to access replicated MongoDB cluster using the tunnel with 3 replicas located on the hosts: `rs01.mongodb.net:52115`, `rs02.mongodb.net:52115` and `rs1.mongodb.net:52115`. For this configuration you will need to create  3 separate tunnels for each host on the port `52115` in transparent mode. Once this done, tunnel application will alter DNS resolution process to resolve these host names to the appropriate loopback address and auto discovery for your replicated cluster should work as intended.

### Installing the QuotaGuard Static socksify wrapper

QuotaGuard Static provides a wrapper script that transparently forwards all outbound TCP traffic through your Static IP. 

>note
> The SOCKS wrapper is incompatible with Java, Play & Node.js. Please contact us for alternative options with these languages.

Download and extract the wrapper in your app directory:

```term
$ curl https://s3.amazonaws.com/quotaguard/quotaguard-socksify-latest.tar.gz | tar xz
```

Add the wrapper to your standard startup commands, for example:

```term
 bin/qgsocksify bundle exec unicorn -p $PORT -c ./config/unicorn.rb
```

You should add all extracted files to your git repo except QUOTAGUARD-LICENSE.txt which can be gitignored.

```term
$ echo "QUOTAGUARD-LICENSE.txt" >> .gitignore
$ git add bin/qgsocksify vendor/dante
$ git commit -m "Add QuotaGuard Static socksify"
```

### Controlling what traffic goes through the socksify wrapper
You can provide a standard subnet mask to only route traffic to certain IP subnets via the `QUOTAGUARDSTATIC_MASK` environment variable. The mask supports sub-network specifications (e.g., 192.0.2.22/24), single addresses (192.0.2.22/32), host names (e.g., ftp.example.org), or domain names (e.g., .example.org). A domain name specification will match any host in that domain.

```term
$ export QUOTAGUARDSTATIC_MASK="100.30.68.0/24"
```

All outbound traffic to 100.30.68.* would be routed via your Static IPs. Multiple masks can be provided by comma separating the mask values:

```term
$ export QUOTAGUARDSTATIC_MASK="100.30.68.0/24,99.29.68.0/24"
```

## Inbound Proxy Setup
The Inbound Proxy allows you to always access your app on a Static IP address. This feature is available on our Micro plan and above.

>warning
> This should NOT be used as a replacement for a DNS entry resolving a custom domain to your PWS app.
 
Once you have provisioned the add-on you just need to visit the QuotaGuard Static Dashboard to complete your setup. You can do this from your your PWS services page.

Visit the Setup page and enter in the full URL of your app.

We then create for you a unique URL that you can use to access your web application: e.g. a62b1d0b4983db763450411fd393b3ce-eu-west-1.getstatica.com.

This corresponds to a DNS A name record that resolves to one of your two QuotaGuard Static IPs. You should include both IP addresses in any firewall rules or whitelists as we may swap between IP addresses at any time.

Open this URL in your browser and you should see your own web application. 

>note
> Please note it may take up to 10 minutes for configuration and DNS changes to propagate.

In your firewall you can now just open access to the two QuotaGuard Static IPs in order to work with your cloud app.

### SSL setup
Our self-service automated setup supports SSL by default. For custom domains you have to upload valid certificate to enable SSL. In both cases SSL will be terminated on QuotaGuard proxies.

## Monitoring & logging

Real-time and historical usage stats can be displayed on the QuotaGuard Static Dashboard accessible from your PWS Service Page.

## Dashboard

The QuotaGuard Static dashboard allows you to view your real-time and historical usage of every API.

## FAQs
### Do you offer dedicated Static IPs?
Yes - dedicated IP addresses are available on request for subscriptions on the Enterprise plan and above. As they require dedicated infrastructure we only provision these on request so please contact us if you want a dedicated Static IP address.

### What happens when I reach my usage limit?
To make sure we grow in harmony with your application QuotaGuard Static operates initially with a soft limit. When you reach your plan's monthly usage limit your requests will continue going through but we will reach out to you via e-mail to ask that you upgrade your plan.

If you repeatedly exceed your limits without upgrading then hard limits may be placed on your account but this is a very last resort.

### I've forgotten what my Static IPs are!
Both IPs are shown on your Dashboard, which you can get to either from your PWS services page.

### Why have you given me two Static IP addresses?
We believe all apps should be built for scalability and high availability. Our commitment to this means we only provide load balanced, high availability services. Load balancing our nodes allows one node to fail or be brought down for maintenance with no impact to your application. Each IP you are given represents one proxy node that is running behind a load balancer.

### Can I access MySQL or Postgres through this?
Yes we have many users doing this. The easiest way for most languages is to use our SOCKS proxy wrapper(installation details higher up the page). If you are using Node.js you can also configure the SOCKS proxy in your Javascript code without using the wrapper (details also on this page).

## Support

All QuotaGuard Static support and runtime issues should be submitted via the PWS Support channels. Any non-support related issues or product feedback is welcome at [support@quotaguard.com](mailto:support@quotaguard.com) or by visiting [QuotaGuard.com](https://www.quotaguard.com).
