---
title: 3scale
---

[3scale](http://www.3scale.net/) is a service that lets you manage API keys, 
apply rate limits, monitor analytics, and control developer accounts. 
3scale features include the following:

* API Access Control and Security
  * Issue and revoke API keys
  * Control access by developer and by application
  * Track and alert API limit violations
* API Service Contracts, Rate Limiting, and Traffic Policies
  * Create and manage service contracts
  * Bundle functionalities of your API contracts
  * Set custom rate limits per developer and per application
* API Analytics and Reporting
  * Track API usage by transaction or other metrics
  * Create reports per account and per application 
  * Report on API usage trends
* Developer Portal CMS and Interactive Documentation
  * Full-featured CMS with version control
  * Company branding
  * Active Docs REST API explorer
  * Automated email sign-up and developer management
  * Developer on-boarding and sign-up workflows

3scale API plugins provide connectivity to the 3scale architecture. 
Supported client libraries exist for Java, .NET, Node.js, Ruby, Perl, PHP, and 
Python.

## <a id='managing'></a>Managing Services ##

Follow the steps below to add 3scale to your org and bind it to a space by 
selecting 3scale from the Pivotal Web Services Marketplace. 

1. Log in to the [PWS Console](https://console.run.pivotal.io/).
1. Select **Marketplace** from the left navigation menu.
1. Click the **3scale** tile.
1. Select a plan that meets your needs. Configure the instance name, the space, 
  and select an application to bind 3scale to.

To create and bind a service instance from the command line, see [Managing services from the command line](/devguide/services/managing-services.html).

## <a id='using-instances'></a>Using Service Instances with Your Application ##

After subscribing to the 3scale service, log in to your 3scale dashboard. 
Navigate to the **Account** area and record your API Key, also known as your 
_provider key_. 
Services use the provider key to authenticate when communicating with 3scale.

<%= image_tag("../images/3scale-api-key.png") %>

Pivotal recommends that you set this key as an environment variable to use in 
your integration code. 
The deployment instructions below assume that you have set your provider key to 
an environment variable named `THREESCALE_PROVIDER_KEY`.

### <a id='deployment'></a>Deployment Overview ###

3scale works using plugin agents that you can deployed anywhere that you want to 
enforce API control. 
3scale provides plugins in multiple application languages for deployment in the 
application stack.

Once installed, agents authorize transactions on the API for valid keys, enforce 
rate limits, and report traffic back to the management system. 
A wide range of plugin/agent configuration options exist to meet different 
architectural needs. 
Alternately, you can call the 3scale traffic management APIs directly.

Below are instructions for deploying the Java, Node.js, and Ruby plugins. 
You can find information for other plugins in their [GitHub repositories](https://github.com/3scale/?query=3scale_ws_api) and in the [3scale support portal](https://support.3scale.net/reference/libraries).

### <a id='ruby'></a>Ruby ###

**Installation**

1. Add the 3scale gem to your Gemfile:

`gem '3scale_client'`

1. Update application dependencies with bundler:

  <pre class='terminal'>
	$ bundle install
	</pre>

<p class='note'><strong>Note</strong>: If you are using Rails config.gems, you can insert <code>config.gem '3scale_client'</code>` in your <code>config/environment.rb</code> file instead of modifying the Gemfile.</p>

**Usage**

Create an instance of the client, referencing your provider key. 
Pivotal recommends assigning your provider key to an environment variable.

`client = ThreeScale::Client.new(:provider_key => ENV['THREESCALE_PROVIDER_KEY'])`

Use your 3scale client to authorize incoming calls to your API. 
This plugin supports the following calls to the 3scale backend:

* `authorize`: Grants access to your API
* `report`: Reports traffic on your API
* `authrep`: Grants access to your API and reports the traffic on it

3scale supports three authentication modes: 
* App ID
* User Key
* OAuth

App Id and User Key support `authrep`. OAuth requires separate `authorize` and `report` calls.

The following example uses the `authrep` call in App ID authentication mode.





